1、第一次使用github

1)github注册账号,网址：https://github.com/
使用邮箱注册账号

先不要创建版本库

 

2)安装git

Linux请参考网上教程，这里演示windows操作。

实际命令行操作基本是一样的。


 msysgit 是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可。

官方下载比较慢，可以使用第三方下载点：msysgit_1.9.4.0_XiaZaiBa.zip

安装完成后，在开始菜单里找到"Git"->"Git Bash"，蹦出一个类似命令行窗口的东西，就说明Git安装成功！

说明：git命令操作和Linux命令差不多，很多命令可以直接使用,比如cd,vi

 

3)安装完成后，还需要最后一步设置，在命令行输入：

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

 

4)创建SSH Key

在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"

会让你输入 .ssh/id_rsa 文件的路径,默认即可
然后输入新密码，确认即可：
复制代码

Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/YJC/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/YJC/.ssh/id_rsa.
Your public key has been saved in /c/Users/YJC/.ssh/id_rsa.pub.
The key fingerprint is:
xx:80:50:0f:25:xx:c8:f1:3c:fe:5e:90:be:9d:d5:xx

复制代码

 

注意：

如果由于其他原因导致git提交时提示 Could not create directory '//.ssh'. ，可以删除之前的id_rsa文件，重新进行：

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
$ ssh-keygen -t rsa -C "youremail@example.com"

windows上id_rsa文件位于用户主目录：C:/Users/YJC/.ssh/

id_rsa
id_rsa.pub

当提示 Enter file in which to save the key (//.ssh/id_rsa): 默认可以为空，如果不行，输入：C:/Users/YJC/.ssh/id_rsa

当提示

Enter passphrase (empty for no passphrase):
Enter same passphrase again:

输入一个密码即可。下次提交代码会让你输入密码。

 

5)登陆GitHub，打开"Account settings"，"SSH Keys"页面：
然后，点"Add SSH Key"，填上任意Title，在Key文本框里粘贴 id_rsa.pub 文件的内容：

　　为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
　　当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

 

6)创建本地版本库(我选的D盘)

$ cd /d/phpsetup/www/git/
$ mkdir fhyblog
$ cd fhyblog
$ pwd


/d/phpsetup/www/git/fhyblog

 

7)通过 git init 命令把这个目录变成Git可以管理的仓库：

$ git init

Initialized empty Git repository in /Users/52fhy/fhyblog/.git/

瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个 .git 的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。

 

8)在本地版本库fhyblog里放入一些代码或文件

　　我放了src目录和一个readme.txt文件

 

9)进入版本库目录：

$ cd /d/phpsetup/www/git/fhyblog/

 

10)更新本地版本库(.指当前所有目录及文件)

$ git add .

当然,如果你仅仅是提交一个文件,可以这样写

$ git add readme.txt

更新一个目录这样写：

$ git add src/

此时还没有真正提交到版本库,只是放在暂存区。提交请继续往下看：

 

11)执行更新操作：

$ git commit -m "相关说明"

[master 91115af] .
1 file changed, 53 insertions(+)
create mode 100644 "\345\215\207\347\272\247\346\227\245\345\277\227.txt"

 

12)更新至远程(Github):

要关联一个远程库，使用命令 

$ git remote add origin git@github.com:yourname/yourgit.git 

关联后，使用命令 

git push -u origin master

进行第一次推送master分支的所有内容；

所以，远程github上确保你的版本库是空的，否则你在这一步可能会不成功。

此后，每次本地提交后，只要有必要，就可以使用命令 git push origin master 推送最新修改；

 
复制代码

$ git push origin master

Warning: Permanently added the RSA host key for IP address '192.30.252.129' to the list of known hosts.
Enter passphrase for key '/c/Users/YJC/.ssh/id_rsa':
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 292 bytes | 0 bytes/s, done.
Total 2 (delta 0), reused 0 (delta 0)
To git@github.com:52fhy/fhyblog.git
efe4969..91115af master -> master
Branch master set up to track remote branch master from origin.

Admin@YJC-PC /d/phpsetup/www/git/fhyblog (master)

复制代码

 

如果完成到这里,恭喜你!你已经有了本地和远程版本库了。



2、再次使用git
以后本地版本库里有更新,使用 git add  添加,使用命令 git commit 提交。
更新至远程使用命令 git push origin master 推送



3、从远程更新至本地版本库
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
复制代码

$ git clone git@github.com:52fhy/fhyBlog.git

Cloning into 'fhyBlog'...
Enter passphrase for key '/c/Users/YJC/.ssh/id_rsa':
remote: Counting objects: 284, done.
remote: Compressing objects: 100% (238/238), done.
remote: Total 284 (delta 28), reused 283 (delta 27)R
Receiving objects: 94% (267/284), 644.00 KiB | 12.00 KiB/
Receiving objects: 100% (284/284), 676.81 KiB | 12.00 KiB/s, done.
Resolving deltas: 100% (28/28), done.


三. Git的一些用法

1. .gitignore文件

屏蔽文件 : .gitignore文件是告诉Git哪些目录或者文件需要忽略, 这些文件将不被提交; 
常用场景 : 写完代码后会执行变异调试等操作, 使用 .gitignore 文件将这些编译后的文件屏蔽, 这些文件不需要Git工具进行管理;
Android中的.gitignore : 在Android中 bin 和 gen 两个目录可以忽略;
.gitignore位置 : 项目根目录下;

过滤模式 : Git中的 .gitignore 中有两种模式,开放模式 和保守模式,保守模式的优先级要高于开放模式;

开放模式 : 设置哪些文件 活 目录 被过滤, 凡是在文件中列出的文件或者目录都要被过滤掉;
-- 过滤目录 : /bin/ 就是将bin目录过滤, 该文件下的所有目录和文件都不被提交;
-- 过滤某个类型文件 : *.zip *.class 就是过滤zip 和 class 后缀的文件, 这些文件不被提交;
-- 过滤指定文件 : /gen/R.java, 过滤该文件, 该文件不被提交;

保守模式 : 设置哪些文件不被过滤, 凡是列在其中的文件都要完整的提交上去;
-- 跟踪目录 : !/src , 该目录下的所有文件都要被提交;
-- 跟踪某类文件 : !*.java , 凡是java文件都要保留;
-- 跟踪指定文件 : !/AndroidManifest.xml , 该文件需要保留, 提交上去;

配置原则 : 一般情况下采用开放模式鱼保守模式共同使用;
eg : 一个目录下有很多目录和文件, 当我们只需要保留其中的一个文件的时候, 先用开放模式不保留这些文件, 然后用保守模式将这个文件留下来, 保守模式的优先级要高于开放模式;

2. 标签使用(Tag)

标签作用: 在开发的一些关键时期,使用标签来记录这些关键时刻, 例如发布版本, 有重大修改, 升级的时候, 会使用标签记录这些时刻, 来永久标记项目中的关键历史时刻;

查看标签: 列出的标签安装ASCII字母顺序确定, 排序没有很明确的意义;
-- 列出所有的标签 :  
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git tag  
-- 使用限定列出限定后的标签 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git tag -l v1.*  



标签分类 : Git中的标签分为 轻量级标签(lightweight) 和 带注释的标签(annotated), 一般情况下推荐使用带注释的标签, 如果标签是临时的可以采用轻量级标签;
-- 轻量级标签 : 轻量级标签中的信息含量很少, 这种标签只代表某时刻代码的提交, 相当于指向这个提交的指针;
-- 带注释标签 : 这种标签是一种校验和, 包含标签名, 邮箱, 日期, 标签信息, GPG签名 和 验证, 它相当于一个对象, 封装了这些信息;

创建标签 :
-- 创建轻量级标签 : 这样的标签没有附带其它的信息;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git tag v2.0  

-- 创建带注释标签 : -m 后跟的是注释信息, 当使用git show v2.1的时候, 会显示这个注释信息;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git tag -a v2.1 -m 'first version'  

-- 创建GPG私钥的注释标签 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git tag -s v2.1 -m 'GPG version'  
在本机上实验不成功 出现下面的错误 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
Administrator@XRDPTJ9ILK6IWRA /storage/TabHost_Test (master)  
$ git tag -s v2.2 -m 'GPG version'  
gpg: error loading `iconv.dll': 找不到指定的模块。  
  
gpg: please see http://www.gnupg.org/download/iconv.html for more information  
gpg: keyblock resource `c:/Documents and Settings/Administrator/.gnupg\secring.g  
pg': file open error  
gpg: keyblock resource `c:/Documents and Settings/Administrator/.gnupg\pubring.g  
pg': file open error  
gpg: skipped "HanShuliang <13241153187@163.com>": secret key not available  
gpg: signing failed: secret key not available  
error: gpg failed to sign the data  
error: unable to sign the tag  
以后再找原因;
-- 为之前的提交添加标签 : 先使用 git log --oneline 命令列出之前的提交, 会有一个七位的十六进制数进行标记, 使用git tag -a v3.1 f1bb97a 命令即可为这个提交添加标签;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
$ git log --oneline  
  
f1bb97a first commit  
  
git tag -a v3.1 f1bb97a  


删除标签 : 使用命令 git tag -d 标签名 命令删除标签;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git tag -d v0.1  



验证标签 : 提交了GPG带注释标签才可以验证, 因为上面没有提交成功, 这里留下一个命令;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git tag -v v1.0  


共享标签 : 即将标签提交到GitHub中;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git push origin --tags  



3. 分支和合并

(1) 查看现存分支

查看现存分支 : git branch命令;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git branch  

从结果可以看出, 现在只有一个分支master;

(2) 创建分支

创建分支 : git branch 分之名称, 就可以创建一个分支, 创建完分支以后可以查看分支, 当前使用的分支会显示成为绿色, 前面带有 "*", 如果不是当前使用的分支, 显示的是白色, 并且没有 "*" 前缀;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git branch branch1  


(3) 切换分支

切换分支 : git checkout 分支名称, 切换分支以后, 在分支进行操作,文件的改变不会体现在master主分支中, 主分支改变, 会体现在其它分支中;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git checkout branch1  


关于主分支和其它分支 : 
-- 分支编辑 : 现有两个分支 master 主分支, 和刚创建的branch1 分支, 切换到 branch1 分支, 在branch1 中创建一个文件 description_branch1.txt; 
-- 其它分支文件不会影响主分支 : 然后在切换回 master 主分支, 发现没有description_branch1.txt文件, 创建一个文件 description_master.txt;
-- 主分支会影响其它分支 : 在切换回 branch1 分支中, 发现存在 description_master.txt文件;
.
对比过程 : 

查看该工程项目分支情况 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git branch  
-- 分支结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
branch1  
master  

切换到 branch1 分支 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git checkout branch1  
-- 切换结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
Switched to branch 'branch1'  

查看 branch1 分支下的文件 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
ls  
-- 查看文件结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
AndroidManifest.xml  ic_launcher-web.png   res  
assets               libs                  src  
bin                  proguard-project.txt  
gen                  project.properties  

创建一个文件 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
touch description_branch1.txt  

添加这个文件到本地缓存 :
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git add description_branch1.txt  

提交本地缓存 : 注意, 这里必须提交, 如果不提交缓存, 这个文件在主分支也会出现;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git commit -m 'add a description of branch1'  
-- 提交结果结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
[branch1 7f5785e] add a description of branch1  
 1 file changed, 0 insertions(+), 0 deletions(-)  
 create mode 100644 description_branch1.txt  

查看该分支下的文件 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
ls  
-- 查看文件结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
AndroidManifest.xml      libs  
assets                   proguard-project.txt  
bin                      project.properties  
<strong>description_branch1.txt</strong>  res  
gen                      src  
ic_launcher-web.png  

切换回主分支 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git checkout master  
-- 切换分支结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
Switched to branch 'master'  
Your branch is up-to-date with 'origin/master'.  

查看主分支文件 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
ls  
-- 查看文件结果 : 没有在 branch1 中添加的文件;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
AndroidManifest.xml  ic_launcher-web.png   res  
assets               libs                  src  
bin                  proguard-project.txt  
gen                  project.properties  


.

(4) 提交分支 

提交分支命令 : 将本地的分支提交到 GitHub中;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git push origin experiment  


(5) 分支合并移除

合并分支命令 : 合并分支之后, 分支中有的文件在 主分支中也会显示, 相当于将branch1 分支中的文件拷贝了一份到master分支中;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git merge branch1  
合并结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
Updating f1bb97a..7f5785e  
Fast-forward  
 description_branch1.txt | 0  
 1 file changed, 0 insertions(+), 0 deletions(-)  
 create mode 100644 description_branch1.txt  



.
(6) 删除分支

删除分支命令 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git branch -d branch1  

强制删除分支命令 : 如果branch1 分支还没有被合并的话, Git是不允许删除这个分支的, 此时要想删除该分支, 就只能使用下面的命令强制删除该分支 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git branch -D branch1  


4. Git工作流程

(1) 两种工作流程

协作开发工作流程 : 这种情况是最复杂的情况, 多人团队共同开发一个项目;
-- 与远程仓库同步 : git pull ;
-- 修改文件 : 添加 删除 修改文件;
-- 查看变更 : git status ;
-- 载入变更 :添加文件, 先使用git add fileName, 在使用 git commit -m 'note' 载入变更; 如果是删除 修改文件, 直接使用 git commit -m 'note' 提交;
-- 重复 : 重复执行 修改文件 查看变更 载入变更 提交载入动作;
-- 上传 : 使用 git push 命令将项目源码提交带GitHub中去;

单独开发工作流程 : 如果是个人独立开发, 仅追踪本地文件变更, 就不需要提交到服务器上, 因为Git是分布式的;
-- 修改文件 : 
-- 提交变更 : 
-- 重复 : 

(2) 简单示例

1> 独立开发示例

该示例不会上传, 仅在本地进行操作;

从GitHub中检出项目源码 : 注意, 检出的源码是根目录源码, 我们在总仓库的根目录检出即可,不同再为项目创建目录;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git clone git@github.com:han1202012/AndroidPictureViewer.git  
-- 检出克隆结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
Cloning into 'AndroidPictureViewer'...  
remote: Counting objects: 86, done.  
remote: Compressing objects: 100% (62/62), done.  
remote: Total 86 (delta 3), reused 86 (delta 3)  
Receiving objects: 100% (86/86), 1.67 MiB | 109.00 KiB/s, done.  
Resolving deltas: 100% (3/3), done.  
Checking connectivity... done.  

删除bin和gen目录 : 这两个目录是Android工程编译产生的临时文件, 没有必要上传到GitHub中去;
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
rm -rf bin gen  
-- 查看删除结果状态 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git status  
-- 结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
On branch master  
Your branch is up-to-date with 'origin/master'.  
  
Changes not staged for commit:  
  (use "git add/rm <file>..." to update what will be committed)  
  (use "git checkout -- <file>..." to discard changes in working directory)  
  
        deleted:    bin/AndroidManifest.xml  
        deleted:    bin/ImageView_Test.apk  
        deleted:    bin/classes.dex  
        deleted:    bin/res/crunch/drawable-xxhdpi/ic_launcher.png  
        deleted:    bin/resources.ap_  
        deleted:    gen/shuliang/han/imageview_test/BuildConfig.java  
        deleted:    gen/shuliang/han/imageview_test/R.java  

提交缓存 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git commit -a  
-- 提交结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
[master e4377ba] delete bin and gen directory.  
 28 files changed, 2 insertions(+), 110 deletions(-)  
 create mode 100644 .gitignore  
 delete mode 100644 bin/AndroidManifest.xml  
 delete mode 100644 bin/ImageView_Test.apk  
 delete mode 100644 bin/classes.dex  
 delete mode 100644 bin/resources.ap_  
 delete mode 100644 gen/shuliang/han/imageview_test/BuildConfig.java  
 delete mode 100644 gen/shuliang/han/imageview_test/R.java  

2> 协作开发示例

与远程仓库同步 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git pull  
-- 如果其他人没有提交项目到GitHub上, 就会出现下面结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
Already up-to-date.  

修改文件后查看变更 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git status  
-- 如果没有变更会出现下面情况 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
On branch master  
Your branch is ahead of 'origin/master' by 1 commit.  
  (use "git push" to publish your local commits)  
  
nothing to commit, working directory clean  

载入变更 : 如果有变更, 那么使用命令载入变更. 使用 git commit -a 或者 git add 命令;
-- 添加文件 : 先使用 git add 文件名 来添加文件到缓存, 之后使用 git commit -m '' 命令提交代码到本地缓存;
-- 删除改变文件 : 直接使用 git commit -m '', 提交删除 或则 改变 到本地缓存;

提交项目源码到服务器 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
git push  
-- 提交源码结果 : 
[plain] view plaincopy在CODE上查看代码片派生到我的代码片 
warning: push.default is unset; its implicit value is changing in  
Git 2.0 from 'matching' to 'simple'. To squelch this message  
and maintain the current behavior after the default changes, use:  
  
  git config --global push.default matching  
  
To squelch this message and adopt the new behavior now, use:  
  
  git config --global push.default simple  
  
See 'git help config' and search for 'push.default' for further information.  
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode  
'current' instead of 'simple' if you sometimes use older versions of Git)  
  
Counting objects: 4, done.  
Delta compression using up to 2 threads.  
Compressing objects: 100% (2/2), done.  
Writing objects: 100% (3/3), 292 bytes | 0 bytes/s, done.  
Total 3 (delta 1), reused 0 (delta 0)  
To git@github.com:han1202012/AndroidPictureViewer.git  
   1ddf8c7..e4377ba  master -> master  
